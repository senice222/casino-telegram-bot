const {User} = require("../models/UserModel");

async function bootstrap(msg, startGameMenu) {
    const userId = msg.from.username;

    try {
        let user = await User.findOne({telegramId: userId});

        if (!user) {
            const doc = new User({
                telegramId: msg.from.username,
                id: msg.from.id,
            });

            await doc.save();
        }

        const chatId = msg.chat.id;
        startGameMenu(chatId);
    } catch (error) {
        console.error("Error processing /start command:", error);
    }
}
async function profileCommandHandler(bot, msg) {
    const tgId = msg.from.username;

    try {
        let user = await User.findOne({ telegramId: tgId });

        if (user) {
            const profileData = `
‚ô£Ô∏è AMG –ü–†–û–§–ò–õ–¨ ‚ô¶Ô∏è

üó£ –†–µ—Ñ–µ—Ä–∞–ª—ã: ${user.referals}
üë§ –í–∞—à ID: ${user.id}
üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}$
üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${user.replenishment}
üì§ –í—ã–≤–æ–¥–æ–≤: ${user.withdrawal}
`;
            const chatId = msg.chat.id;
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: "üì§ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: "topup" },
                        { text: "üì§ –í—ã–≤–æ–¥", callback_data: "withdraw" },
                    ],
                    [{ text: "–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data: "home" }],
                ],
            };

            const opts = {
                reply_markup: JSON.stringify(keyboard),
            };
            bot.sendMessage(chatId, profileData, opts);
        } else {
            const chatId = msg.chat.id;
            bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /profile:", error);
    }
}
module.exports = {
    bootstrap,
    profileCommandHandler
}