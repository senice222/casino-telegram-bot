const { User } = require("../models/UserModel");
const { Dice } = require("../models/CreateDiceGameModel");
const { startGameMenu } = require("../index");

function startDiceGame(bot, chatId) {
  const opts = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: "–ë–æ–ª—å—à–µ", callback_data: "guessMore" }],
        [{ text: "–ú–µ–Ω—å—à–µ", callback_data: "guessLess" }],
      ],
    }),
  };
  bot.sendMessage(
    chatId,
    "–£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 3.",
    opts
  );
}

async function rollDice(bot, chatId, userChoice) {
  const emoji = userChoice === "more" ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è";

  const apiUrl = `https://api.telegram.org/bot${process.env.TOKEN}/sendDice?chat_id=${chatId}`;
  try {
    const response = await fetch(apiUrl, { method: "POST" });
    const data = await response.json();

    if (data.ok && data.result) {
      const diceValue = data.result.dice.value;

      setTimeout(() => {
        let resultMessage = "";
        if (
          (userChoice === "more" && diceValue > 3) ||
          (userChoice === "less" && diceValue <= 3)
        ) {
          resultMessage = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏! –ö—É–±–∏–∫: üé≤${diceValue} ${emoji}`;
        } else {
          resultMessage = `–£–≤—ã, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ö—É–±–∏–∫: üé≤${diceValue} ${emoji}`;
        }

        const opts = {
          reply_markup: JSON.stringify({
            inline_keyboard: [
              [{ text: "–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data: "newGame" }],
              [{ text: "–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data: "home" }],
            ],
          }),
        };

        bot.sendMessage(chatId, resultMessage, opts);
      }, 4200);
    } else {
      console.error("Failed to get dice value:", data);
    }
  } catch (error) {
    console.error("Error fetching dice value:", error);
  }
}

async function startCreateDiceGame(bot, chatId) {
  try {
    const user = await User.findOne({ id: chatId });
    const createGameMessage = `‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –≤ üé≤ DICE\n\n‚Äî –ú–∏–Ω–∏–º—É–º: 1 $\n‚Äî –ë–∞–ª–∞–Ω—Å: ${user.balance} $\n\n‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏`;
    bot.sendMessage(chatId, createGameMessage);

    bot.once("text", (msg) => {
      const userId = msg.from.id;
      const amount = msg.text;
      createDiceGame(bot, userId, amount);
    });
  } catch (e) {
    console.log(e);
  }
}

async function createDiceGame(bot, userId, amount) {
  try {
    const user = await User.findOne({ id: userId });

    if (/^üôÖ‚Äç‚ôÇÔ∏è Cancel$/i.test(amount)) {
      return;
    }

    if (
      isNaN(amount) ||
      parseFloat(amount) <= 0 ||
      parseFloat(amount) > user.balance
    ) {
      const incorrectAmountMessage = `–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏: ${amount}`;
      bot.sendMessage(userId, incorrectAmountMessage);

      startCreateDiceGame(bot, userId);
      return;
    }

    const doc = new Dice({
      ownerId: userId,
      amount,
      users: [userId],
      status: "pending",
    });
    await doc.save();
    const successMessage = "üé≤ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!";

    const inlineKeyboard = [
      [{ text: "‚åõ –û–∂–∏–¥–∞–Ω–∏–µ", callback_data: "waiting" }],
      [{ text: "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 1/2", callback_data: "participants" }],
      [{ text: "üö∂‚Äç‚ôÇÔ∏è –ü–æ–∫–∏–Ω—É—Ç—å", callback_data: "leaveDiceGame" }],
    ];

    const options = {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    };

    bot.sendMessage(userId, successMessage, options);
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∏: ${error}`);
  }
}

async function leaveDiceGame(bot, chatId) {
  const message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:";

  try {
    const existingGame = await Dice.findOneAndDelete({ ownerId: chatId });
    if (existingGame) {
      const options = {
        reply_markup: JSON.stringify({
          keyboard: [
            [{ text: "üé≤ Dice" }],
            [{ text: "üèÄ Basketball" }],
            [{ text: "üôÖ‚Äç‚ôÇÔ∏è Cancel" }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        }),
      };
      bot.sendMessage(chatId, message, options);
    } else {
      const noGameMessage = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.";
      bot.sendMessage(chatId, noGameMessage);
    }
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –≥—Ä–∏: ${error}`);
  }
}

async function availableDiceGames(bot, chatId) {
  console.log(chatId)
  const games = await Dice.find({ status: "pending" });

  if (games.length === 0) {
    bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä.");
    return;
  }

  const inlineKeyboard = games.map((game, index) => [
    {
      text: `üé≤ Game ${index + 1} - ${game.amount}$`,
      callback_data: `join_dice_game_${game._id}`,
    },
  ]);
  inlineKeyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "games" }]);
  const options = {
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  };

  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", options);
}
async function handleJoinGameCallback(chatId, data) {
  const gameId = data.replace('join_game_', '');

  const game = await Dice.findById(gameId);
  console.log(game, chatId);
  // if (game && game.status === 'pending') {
  //   const player1Message = `–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –£–¥–∞—á–∏ –≤–∞–º, –∏–≥—Ä–æ–∫ ${game.users[0]}!`;
  //   const player2Message = `–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –£–¥–∞—á–∏ –≤–∞–º, –∏–≥—Ä–æ–∫ ${game.users[1]}!`;

  //   bot.sendMessage(game.users[0], player1Message);
  //   bot.sendMessage(game.users[1], player2Message);

  // } else {
  //   const errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–≥—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.';
  //   bot.sendMessage(chatId, errorMessage);
  // }
}

module.exports = {
  rollDice,
  startDiceGame,
  startCreateDiceGame,
  leaveDiceGame,
  availableDiceGames,
  handleJoinGameCallback,
};
