


function startGameMenu(bot, chatId) {
    const rescueRingEmoji = '\u{1F6DF}';
    const opts = {
        reply_markup: JSON.stringify({
            keyboard: [
                [{text: 'üé∞ –ò–≥—Ä—ã'}],
                [{text: 'üéÅ –ë–æ–Ω—É—Å—ã'}, {text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'}],
                [{text: `${rescueRingEmoji} –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞`}, {text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }),
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', opts);
}

function startDiceGame(bot, chatId) {
    const opts = {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: '–ë–æ–ª—å—à–µ', callback_data: 'guessMore'}],
                [{text: '–ú–µ–Ω—å—à–µ', callback_data: 'guessLess'}],
            ],
        }),
    };
    bot.sendMessage(chatId, '–£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 3.', opts);
}

function showBonuses(bot, chatId) {
    const opts = {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data: 'referralBonus'}],
            ],
        }),
    };

    bot.sendMessage(chatId, 'üéÅ –î–æ—Å—Ç—É–ø–Ω—ñ –±–æ–Ω—É—Å–∏:', opts);
}

function showReferralSystem(bot, chatId) {
    const referralMessage = `üîó –í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è - https://t.me/azimut_casino_bot?start=${chatId}\n\n`
        + `üó£ –†–µ—Ñ–µ—Ä–∞–ª–∏: 0\n`
        + `üí∏ –ü—Ä–∏–±—É—Ç–æ–∫ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: 0 –≥—Ä–Ω\n`
        + `- - - - -\n`
        + `–£–º–æ–≤–∏:\n`
        + `1Ô∏è‚É£ –õ—é–¥–∏–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –≤–∞—à–æ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ —ñ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, —Ç–æ–¥—ñ –≤–∞–º –∑–∞—Ä–∞—Ö—É—î—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª\n`
        + `2Ô∏è‚É£ –ü—Ä–∏ –∫–æ–∂–Ω–æ–º—É –¥–µ–ø–æ–∑–∏—Ç—ñ –≤–∞—à–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ 10% –≤—ñ–¥ –π–æ–≥–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è`;

    const opts = {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'home'}],
            ],
        }),
    };

    bot.sendMessage(chatId, referralMessage, opts);
}

async function rollDice(bot, chatId, userChoice) {
    const emoji = userChoice === 'more' ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è';
    
    const apiUrl = `https://api.telegram.org/bot${token}/sendDice?chat_id=${chatId}`;
    try {
        const response = await fetch(apiUrl, { method: 'POST' });
        const data = await response.json();

        if (data.ok && data.result) {
            const diceValue = data.result.dice.value;

            setTimeout(() => {
                let resultMessage = '';
                if ((userChoice === 'more' && diceValue > 3) || (userChoice === 'less' && diceValue <= 3)) {
                    resultMessage = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏! –ö—É–±–∏–∫: üé≤${diceValue} ${emoji}`;
                } else {
                    resultMessage = `–£–≤—ã, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ö—É–±–∏–∫: üé≤${diceValue} ${emoji}`;
                }

                const opts = {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '–ù–æ–≤–∞—è –∏–≥—Ä–∞', callback_data: 'newGame' }],
                            [{ text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'home' }],
                        ],
                    }),
                };

                bot.sendMessage(chatId, resultMessage, opts);
            }, 4200);
        } else {
            console.error('Failed to get dice value:', data);
        }
    } catch (error) {
        console.error('Error fetching dice value:', error);
    }
}

async function startBasketballGame(bot, chatId) {

    bot.sendDice(chatId, { emoji: 'üèÄ' })
    .then((message) => {
        console.log(message)
        const diceValue = message.dice.value;
        handleBasketballGame(chatId, diceValue)
    })
    .catch((error) => {
        console.error('Error sending dice:', error);
    });

    userState[chatId] = 'Basketball';
}

function handleBasketballGame(bot, chatId, diceValue) {
    let resultMessage = '';

    setTimeout(() => {
        if (diceValue === 1 || diceValue ===  4) {
            resultMessage = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É üèÄ';
        } else {
            resultMessage = '–£–≤—ã, –º—è—á –Ω–µ –ø–æ–ø–∞–ª –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üèÄ';
        }

        const opts = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '–ù–æ–≤–∞—è –∏–≥—Ä–∞', callback_data: 'newGame' }],
                    [{ text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'home' }],
                ],
            }),
        };
    
        bot.sendMessage(chatId, resultMessage, opts);
    }, [3500])
}



module.exports = {
    startGameMenu,
    startDiceGame,
    showBonuses,
    showReferralSystem,
    rollDice,
    startBasketballGame,
    handleBasketballGame
};